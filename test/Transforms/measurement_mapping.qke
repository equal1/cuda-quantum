// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --func.func(measurement-mapping{measurement-qubits=0,5}) %s | FileCheck %s

// This test checks that adds a measurement mapping to the function.
func.func @checkMeasurementMapping() {
    %0 = quake.alloca !quake.veq<6>
    %1 = quake.extract_ref %0[0] : (!quake.veq<6>) -> !quake.ref
    %2 = quake.extract_ref %0[1] : (!quake.veq<6>) -> !quake.ref
    %3 = quake.extract_ref %0[2] : (!quake.veq<6>) -> !quake.ref
    %4 = quake.extract_ref %0[3] : (!quake.veq<6>) -> !quake.ref
    %5 = quake.extract_ref %0[4] : (!quake.veq<6>) -> !quake.ref
    %6 = quake.extract_ref %0[5] : (!quake.veq<6>) -> !quake.ref
    %measOut_0 = quake.mz %1 : (!quake.ref) -> !quake.measure
    %measOut_1 = quake.mz %3 : (!quake.ref) -> !quake.measure
    %measOut_2 = quake.mz %4 : (!quake.ref) -> !quake.measure
    %measOut_3 = quake.mz %6 : (!quake.ref) -> !quake.measure
    return
}

// CHECK-LABEL:   func.func @checkMeasurementMapping() {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.veq<6>
// CHECK:           %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_2:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_0]][2] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_0]][3] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_0]][4] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_6:.*]] = quake.extract_ref %[[VAL_0]][5] : (!quake.veq<6>) -> !quake.ref
// CHECK:           %[[VAL_7:.*]] = quake.mz %[[VAL_1]] : (!quake.ref) -> !quake.measure
// CHECK:           quake.reset %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:           quake.swap %[[VAL_3]], %[[VAL_2]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.swap %[[VAL_2]], %[[VAL_1]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           %[[VAL_8:.*]] = quake.mz %[[VAL_1]] : (!quake.ref) -> !quake.measure
// CHECK:           quake.swap %[[VAL_4]], %[[VAL_5]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.swap %[[VAL_5]], %[[VAL_6]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           %[[VAL_9:.*]] = quake.mz %[[VAL_6]] : (!quake.ref) -> !quake.measure
// CHECK:           quake.reset %[[VAL_6]] : (!quake.ref) -> ()
// CHECK:           quake.swap %[[VAL_6]], %[[VAL_5]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.swap %[[VAL_5]], %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           %[[VAL_10:.*]] = quake.mz %[[VAL_6]] : (!quake.ref) -> !quake.measure
// CHECK:           return

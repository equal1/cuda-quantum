# ============================================================================ #
# Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                   #
# All rights reserved.                                                         #
#                                                                              #
# This source code and the accompanying materials are made available under     #
# the terms of the Apache License 2.0 which accompanies this distribution.     #
# ============================================================================

name: equal1
description:
  "CUDA-Q target for Equal1 Platforms"

config:
  platform-qpu: "remote_rest"
  # Tell NVQ++ to generate glue code to set the target backend name
  gen-target-backend: true
  # Add the equal1-qpu library to the link list
  link-libs: ["-lcudaq-rest-qpu"]

  library-mode: false

  # Full pipeline
  platform-lowering-config: >-
    func.func(const-prop-complex,canonicalize,cse,lift-array-alloc),
    globalize-array-values,
    state-prep,
    unitary-synthesis,
    canonicalize,
    apply-op-specialization,
    aggressive-early-inlining,
    expand-measurements,
    unrolling-pipeline,
    func.func(lower-to-cfg),
    canonicalize,
    func.func(multicontrol-decomposition,combine-quantum-alloc,apply-control-negations,add-dealloc),
    canonicalize,
    func.func(factor-quantum-alloc,memtoreg),
    add-wireset,func.func(assign-wire-indices),
    qubit-mapping{device=path(4)},
    canonicalize,
    func.func(regtomem,combine-quantum-alloc,delay-measurements,measurement-mapping{measurement-qubits=0,3}),
    basis-conversion{basis=x,z,y,z(1),rx,ry,rz,mz},
    canonicalize,
    symbol-dce

  # Pipeline without qubit mapping
  # platform-lowering-config: >-
  #   func.func(const-prop-complex,canonicalize,cse,lift-array-alloc),
  #   globalize-array-values,
  #   state-prep,
  #   unitary-synthesis,
  #   canonicalize,
  #   apply-op-specialization,
  #   aggressive-early-inlining,
  #   expand-measurements,
  #   unrolling-pipeline,
  #   func.func(lower-to-cfg),
  #   canonicalize,
  #   func.func(multicontrol-decomposition,combine-quantum-alloc,apply-control-negations,add-dealloc),
  #   canonicalize,
  #   func.func(factor-quantum-alloc,memtoreg),
  #   add-wireset,func.func(assign-wire-indices),
  #   canonicalize,
  #   func.func(regtomem,combine-quantum-alloc,delay-measurements,measurement-mapping{measurement-qubits=0,3}),
  #   basis-conversion{basis=x,z,y,z(1),rx,ry,rz,mz},
  #   canonicalize,
  #   symbol-dce

  # Pipeline without measurement mapping
  # platform-lowering-config: >-
  #   func.func(const-prop-complex,canonicalize,cse,lift-array-alloc),
  #   globalize-array-values,
  #   state-prep,
  #   unitary-synthesis,
  #   canonicalize,
  #   apply-op-specialization,
  #   aggressive-early-inlining,
  #   expand-measurements,
  #   unrolling-pipeline,
  #   func.func(lower-to-cfg),
  #   canonicalize,
  #   func.func(multicontrol-decomposition,combine-quantum-alloc,apply-control-negations,add-dealloc),
  #   canonicalize,
  #   func.func(factor-quantum-alloc,memtoreg),
  #   add-wireset,func.func(assign-wire-indices),
  #   qubit-mapping{device=path(4)},
  #   canonicalize,
  #   func.func(regtomem,combine-quantum-alloc,delay-measurements),
  #   basis-conversion{basis=x,z,y,z(1),rx,ry,rz,mz},
  #   func.func(delay-measurements),
  #   canonicalize,
  #   symbol-dce

  # Pipeline without all mapping
  # platform-lowering-config: >-
  #   func.func(const-prop-complex,canonicalize,cse,lift-array-alloc),
  #   globalize-array-values,
  #   state-prep,
  #   unitary-synthesis,
  #   canonicalize,
  #   apply-op-specialization,
  #   aggressive-early-inlining,
  #   expand-measurements,
  #   unrolling-pipeline,
  #   func.func(lower-to-cfg),
  #   canonicalize,
  #   func.func(multicontrol-decomposition,combine-quantum-alloc,apply-control-negations,add-dealloc),
  #   canonicalize,
  #   func.func(factor-quantum-alloc,memtoreg),
  #   add-wireset,func.func(assign-wire-indices),
  #   canonicalize,
  #   func.func(regtomem,combine-quantum-alloc,delay-measurements),
  #   basis-conversion{basis=x,z,y,z(1),rx,ry,rz,mz},
  #   func.func(delay-measurements),
  #   canonicalize,
  #   symbol-dce

  codegen-emission: qir-adaptive

  library-mode: false

target-arguments:
  - key: machine
    required: false
    type: string
    platform-arg: machine
    help-string: "Specify the Equal1 QPU family."
  - key: url
    required: false
    type: string
    platform-arg: url
    help-string: "Specify the URL."
  - key: opt
    required: false
    type: string
    platform-arg: opt
    help-string: "Specify the optimization levels to be applied to the circuit"

